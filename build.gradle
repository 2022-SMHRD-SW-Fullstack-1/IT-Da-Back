/*
 * This file was generated by the Gradle 'init' task.
 */
buildscript {
    ext { // build.gradle 에서 사용하는 전역변수 설정
        springBootVersion = '2.7.5'
    }
    repositories {
        mavenCentral()
        maven {
            url = uri('https://repo.maven.apache.org/maven2/')
    }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}
group = 'portal'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
	compileOnly 'org.projectlombok:lombok:1.18.26'
	annotationProcessor 'org.projectlombok:lombok:1.18.26'
	testCompileOnly 'org.projectlombok:lombok:1.18.26'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
    implementation 'org.springframework:spring-context-support'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'commons-fileupload:commons-fileupload:1.5'
    implementation 'org.springframework:spring-websocket:5.3.23'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.springframework.boot:spring-boot-devtools:2.6.14'
    runtimeOnly 'mysql:mysql-connector-java:8.0.30'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.7.4'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
}
bootWar {
    archiveFileName = 'smhrdPortal.war'
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

def webappDir = "$projectDir/src/main/frontend"

sourceSets {
    main {
    resources {
            srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
        }
    }
}

processResources {
    dependsOn "buildReact"
}

task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task installReact(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine 'npm.cmd', 'install'
    } else {
        commandLine "npm", "audit", "fix"
        commandLine 'npm', 'install'
    }
}